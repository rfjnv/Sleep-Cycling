#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ SleepyBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import importlib
import subprocess
from datetime import datetime

def check_file_exists(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    exists = os.path.exists(filename)
    status = "‚úÖ" if exists else "‚ùå"
    print(f"   {status} {filename}")
    return exists

def check_import(module_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è"""
    try:
        importlib.import_module(module_name)
        print(f"   ‚úÖ {module_name}")
        return True
    except ImportError as e:
        print(f"   ‚ùå {module_name} - {e}")
        return False

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        # –î–ª—è Windows –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
        env = os.environ.copy()
        if sys.platform == "win32":
            env["PYTHONIOENCODING"] = "utf-8"
            
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30, env=env)
        if result.returncode == 0:
            print(f"   ‚úÖ {description}")
            return True
        else:
            print(f"   ‚ùå {description} - –∫–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
            if result.stderr:
                print(f"      –û—à–∏–±–∫–∞: {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        print(f"   ‚è∞ {description} - —Ç–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"   ‚ùå {description} - {e}")
        return False

def validate_project():
    """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ SleepyBot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤:")
    required_files = [
        "main.py",
        "demo.py", 
        "web_demo.py",
        "test_quick.py",
        "test_imports.py",
        "requirements.txt",
        "README.md",
        "DEVELOPMENT.md",
        "QUICKSTART.md",
        ".gitignore"
    ]
    
    file_checks = [check_file_exists(f) for f in required_files]
    files_ok = all(file_checks)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    required_modules = [
        "telegram",
        "flask", 
        "requests"
    ]
    
    import_checks = [check_import(m) for m in required_modules]
    imports_ok = all(import_checks)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Å–∫—Ä–∏–ø—Ç–æ–≤
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Å–∫—Ä–∏–ø—Ç–æ–≤:")
    
    # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    python_files = ["main.py", "demo.py", "web_demo.py", "test_quick.py", "test_imports.py"]
    syntax_checks = []
    
    for py_file in python_files:
        if os.path.exists(py_file):
            syntax_ok = run_command(f"python -m py_compile {py_file}", f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å {py_file}")
            syntax_checks.append(syntax_ok)
        else:
            syntax_checks.append(False)
    
    syntax_ok = all(syntax_checks)
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("\nüß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    
    test_results = []
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    test_results.append(run_command("python test_imports.py", "–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫"))
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    test_results.append(run_command("python test_quick.py", "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"))
    
    # –¢–µ—Å—Ç –¥–µ–º–æ
    test_results.append(run_command("python demo.py", "–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"))
    
    tests_ok = all(test_results)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print("=" * 50)
    
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤: {'‚úÖ PASS' if files_ok else '‚ùå FAIL'}")
    print(f"üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ PASS' if imports_ok else '‚ùå FAIL'}")
    print(f"üêç –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {'‚úÖ PASS' if syntax_ok else '‚ùå FAIL'}")
    print(f"üß™ –¢–µ—Å—Ç—ã: {'‚úÖ PASS' if tests_ok else '‚ùå FAIL'}")
    
    overall_status = all([files_ok, imports_ok, syntax_ok, tests_ok])
    
    print("\n" + "=" * 50)
    if overall_status:
        print("üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("   –ò–ª–∏ –≤–µ–±-–¥–µ–º–æ: python web_demo.py")
    else:
        print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
    
    print("=" * 50)
    
    return overall_status

if __name__ == "__main__":
    success = validate_project()
    sys.exit(0 if success else 1)
