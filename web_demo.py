#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SleepyBot –±–µ–∑ Telegram
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000
"""

from flask import Flask, render_template_string, request, jsonify
from main import SleepCalculator
import re

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåô SleepyBot Web Demo</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .input-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, button {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            box-sizing: border-box;
        }
        input {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        input:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.6);
        }
        button {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            margin-top: 10px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }
        button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        .examples {
            margin: 20px 0;
            font-size: 14px;
            opacity: 0.8;
        }
        .result {
            margin-top: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            display: none;
        }
        .wake-time {
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            font-family: monospace;
        }
        .error {
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.2);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåô SleepyBot Demo</h1>
        
        <div class="input-group">
            <label for="sleepTime">üõè –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–µ—á—å —Å–ø–∞—Ç—å?</label>
            <input type="text" id="sleepTime" placeholder="23:30, —Å–µ–π—á–∞—Å, +15, +30...">
        </div>
        
        <div class="examples">
            <strong>üìù –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:</strong><br>
            ‚Ä¢ <code>23:30</code> ‚Äî –ª–µ—á—å —Å–ø–∞—Ç—å –≤ 23:30<br>
            ‚Ä¢ <code>—Å–µ–π—á–∞—Å</code> ‚Äî –ª–µ—á—å —Å–ø–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å<br>
            ‚Ä¢ <code>+15</code> ‚Äî –ª–µ—á—å —Å–ø–∞—Ç—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç<br>
            ‚Ä¢ <code>+30</code> ‚Äî –ª–µ—á—å —Å–ø–∞—Ç—å —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        </div>
        
        <button onclick="calculateSleep()">üí§ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–∏–∫–ª—ã —Å–Ω–∞</button>
        
        <div id="result" class="result"></div>
    </div>

    <script>
        function calculateSleep() {
            const sleepTime = document.getElementById('sleepTime').value.trim();
            const resultDiv = document.getElementById('result');
            
            if (!sleepTime) {
                showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞!');
                return;
            }
            
            fetch('/calculate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({sleepTime: sleepTime})
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    showError(data.error);
                } else {
                    showResult(data);
                }
            })
            .catch(error => {
                showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: ' + error);
            });
        }
        
        function showResult(data) {
            const resultDiv = document.getElementById('result');
            
            let html = `
                <h3>üõè –í—Ä–µ–º—è —Å–Ω–∞: ${data.sleepTimeFormatted}</h3>
                <p>üí§ –° —É—á—ë—Ç–æ–º 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ</p>
                <h4>‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è:</h4>
            `;
            
            data.wakeTimes.forEach(wakeTime => {
                html += `<div class="wake-time">${wakeTime}</div>`;
            });
            
            html += '<p><strong>üò¥ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –≤—Ä–µ–º—ë–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è!</strong></p>';
            
            resultDiv.innerHTML = html;
            resultDiv.style.display = 'block';
            resultDiv.className = 'result';
        }
        
        function showError(message) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = `<h3>‚ùå –û—à–∏–±–∫–∞</h3><p>${message}</p>`;
            resultDiv.style.display = 'block';
            resultDiv.className = 'result error';
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        document.getElementById('sleepTime').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                calculateSleep();
            }
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/calculate', methods=['POST'])
def calculate():
    """API –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞"""
    try:
        data = request.get_json()
        sleep_input = data.get('sleepTime', '').strip()
        
        if not sleep_input:
            return jsonify({'error': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞!'})
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        sleep_time = SleepCalculator.parse_time_input(sleep_input)
        
        if sleep_time is None:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 23:30, —Å–µ–π—á–∞—Å, +15'})
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        wake_times = SleepCalculator.calculate_wake_times(sleep_time)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        sleep_time_str = sleep_time.strftime("%H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
        if sleep_input.lower() == "—Å–µ–π—á–∞—Å":
            sleep_description = "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
        elif sleep_input.startswith("+"):
            sleep_description = f"—á–µ—Ä–µ–∑ {sleep_input[1:]} –º–∏–Ω—É—Ç"
        else:
            sleep_description = f"–≤ {sleep_time_str}"
        
        # –û—á–∏—â–∞–µ–º wake_times –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –≤–µ–±–∞
        clean_wake_times = []
        for wake_time in wake_times:
            # –£–±–∏—Ä–∞–µ–º ** –∏ –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏
            clean_time = re.sub(r'\*\*(.*?)\*\*', r'\1', wake_time)
            clean_wake_times.append(clean_time)
        
        return jsonify({
            'sleepTimeFormatted': f"{sleep_description} ({sleep_time_str})",
            'wakeTimes': clean_wake_times
        })
        
    except Exception as e:
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'})

if __name__ == '__main__':
    print("üåô SleepyBot Web Demo –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    app.run(debug=True, host='0.0.0.0', port=5000)
