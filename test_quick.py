#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ SleepyBot
"""

import sys
import os

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    os.system("chcp 65001 > nul")

import unittest
from datetime import datetime, timedelta
from main import SleepCalculator

class TestSleepCalculator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è SleepCalculator"""
    
    def test_parse_time_now(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ '—Å–µ–π—á–∞—Å'"""
        result = SleepCalculator.parse_time_input("—Å–µ–π—á–∞—Å")
        self.assertIsNotNone(result)
        self.assertIsInstance(result, datetime)
    
    def test_parse_time_plus_minutes(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ '+15'"""
        now = datetime.now()
        result = SleepCalculator.parse_time_input("+15")
        self.assertIsNotNone(result)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç
        diff = (result - now).total_seconds()
        self.assertAlmostEqual(diff, 15 * 60, delta=5)  # 5 —Å–µ–∫—É–Ω–¥ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
    
    def test_parse_time_format(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ '—á—á:–º–º'"""
        result = SleepCalculator.parse_time_input("23:30")
        self.assertIsNotNone(result)
        self.assertEqual(result.hour, 23)
        self.assertEqual(result.minute, 30)
    
    def test_parse_invalid_time(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        result = SleepCalculator.parse_time_input("25:70")
        self.assertIsNone(result)
        
        result = SleepCalculator.parse_time_input("–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞")
        self.assertIsNone(result)
    
    def test_calculate_wake_times(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º—ë–Ω –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        sleep_time = datetime(2025, 9, 20, 23, 30)
        wake_times = SleepCalculator.calculate_wake_times(sleep_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
        self.assertIsInstance(wake_times, list)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        self.assertEqual(len(wake_times), 6)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞
        for wake_time in wake_times:
            self.assertIsInstance(wake_time, str)
            self.assertIn("üïê", wake_time)

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ SleepyBot...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏...")
    test_inputs = ["—Å–µ–π—á–∞—Å", "+15", "23:30", "00:00", "12:45"]
    
    for test_input in test_inputs:
        result = SleepCalculator.parse_time_input(test_input)
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} '{test_input}' -> {result}")
    
    # –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥—ã
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥—ã...")
    invalid_inputs = ["25:00", "12:60", "–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞", "", "24:00"]
    
    for test_input in invalid_inputs:
        result = SleepCalculator.parse_time_input(test_input)
        status = "‚úÖ" if result is None else "‚ùå"
        print(f"   {status} '{test_input}' -> {result}")
    
    # –¢–µ—Å—Ç 3: –†–∞—Å—á—ë—Ç –≤—Ä–µ–º—ë–Ω –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á—ë—Ç –≤—Ä–µ–º—ë–Ω –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è...")
    sleep_time = datetime(2025, 9, 20, 23, 30)
    wake_times = SleepCalculator.calculate_wake_times(sleep_time)
    
    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(wake_times)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")
    for i, wake_time in enumerate(wake_times[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"   {i}. {wake_time}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--unittest":
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
        print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤...")
        unittest.main(argv=[''], exit=False)
    else:
        # –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
        run_quick_test()
