#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import List, Optional

import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8381755892:AAGDdAHcvYt3RO7DvKmjSO716o_mdSIZxCY"

# Keep-alive —Å–µ—Ä–≤–µ—Ä (–¥–ª—è Replit)
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def keep_alive():
    return "ü§ñ SleepyBot is running!"

def run_keep_alive():
    app.run(host='0.0.0.0', port=8080)

def start_keep_alive():
    server = threading.Thread(target=run_keep_alive)
    server.daemon = True
    server.start()

class SleepCalculator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ü–∏–∫–ª–æ–≤ —Å–Ω–∞"""
    
    SLEEP_CYCLE_MINUTES = 90  # –û–¥–∏–Ω —Ü–∏–∫–ª —Å–Ω–∞ = 90 –º–∏–Ω—É—Ç
    FALL_ASLEEP_MINUTES = 15  # –í—Ä–µ–º—è –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ
    
    @staticmethod
    def parse_time_input(text: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
        text = text.strip().lower()
        now = datetime.now()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "—Å–µ–π—á–∞—Å"
        if text == "—Å–µ–π—á–∞—Å":
            return now
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "+10", "+20", "+30" –∏ —Ç.–¥.
        plus_match = re.match(r'\+(\d+)', text)
        if plus_match:
            minutes_to_add = int(plus_match.group(1))
            return now + timedelta(minutes=minutes_to_add)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º
        time_match = re.match(r'(\d{1,2}):(\d{2})', text)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2))
            
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                sleep_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä—ë–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
                if sleep_time <= now:
                    sleep_time += timedelta(days=1)
                
                return sleep_time
        
        return None
    
    @staticmethod
    def calculate_wake_times(sleep_time: datetime) -> List[str]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ
        actual_sleep_start = sleep_time + timedelta(minutes=SleepCalculator.FALL_ASLEEP_MINUTES)
        
        wake_times = []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è (–æ—Ç 3 –¥–æ 8 —Ü–∏–∫–ª–æ–≤)
        for cycles in range(3, 9):
            sleep_duration = cycles * SleepCalculator.SLEEP_CYCLE_MINUTES
            wake_time = actual_sleep_start + timedelta(minutes=sleep_duration)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = wake_time.strftime("%H:%M")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–Ω–∞
            hours = sleep_duration // 60
            minutes = sleep_duration % 60
            duration_str = f"{hours}—á {minutes}–º" if minutes > 0 else f"{hours}—á"
            
            wake_times.append(f"üïê **{time_str}** ({cycles} —Ü–∏–∫–ª–æ–≤, {duration_str} —Å–Ω–∞)")
        
        return wake_times

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
üåô **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SleepyBot!** 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ 90-–º–∏–Ω—É—Ç–Ω—ã–º —Ü–∏–∫–ª–∞–º —Å–Ω–∞.

üìù **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `—á—á:–º–º` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `23:30`)
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `—Å–µ–π—á–∞—Å` –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ò–ª–∏ `+10`, `+20`, `+30` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–Ω —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç

üí° **–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ!**

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–µ—á—å —Å–ø–∞—Ç—å! üò¥
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ SleepyBot**

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `23:30` ‚Äî –ª—è–≥—É —Å–ø–∞—Ç—å –≤ 23:30
‚Ä¢ `—Å–µ–π—á–∞—Å` ‚Äî –ª—è–≥—É —Å–ø–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
‚Ä¢ `+15` ‚Äî –ª—è–≥—É —Å–ø–∞—Ç—å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
üîÑ –û–¥–∏–Ω —Ü–∏–∫–ª —Å–Ω–∞ = 90 –º–∏–Ω—É—Ç
üò¥ –î–æ–±–∞–≤–ª—è—é 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ
‚è∞ –ü–æ–∫–∞–∑—ã–≤–∞—é 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è (3-8 —Ü–∏–∫–ª–æ–≤)

**–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ 90 –º–∏–Ω—É—Ç?**
–≠—Ç–æ —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–Ω–∞ (REM + –≥–ª—É–±–æ–∫–∏–π —Å–æ–Ω). –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–¥—Ä–µ–µ!
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def calculate_sleep(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞"""
    user_input = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sleep_time = SleepCalculator.parse_time_input(user_input)
    
    if sleep_time is None:
        error_message = """
‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è!**

üìù **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:**
‚Ä¢ `23:30` –∏–ª–∏ `23:30`
‚Ä¢ `—Å–µ–π—á–∞—Å`
‚Ä¢ `+10`, `+20`, `+30`

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üòä
        """
        await update.message.reply_text(error_message, parse_mode='Markdown')
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    wake_times = SleepCalculator.calculate_wake_times(sleep_time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    sleep_time_str = sleep_time.strftime("%H:%M")
    
    if user_input.lower() == "—Å–µ–π—á–∞—Å":
        sleep_input_text = "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
    elif user_input.startswith("+"):
        sleep_input_text = f"—á–µ—Ä–µ–∑ {user_input[1:]} –º–∏–Ω—É—Ç"
    else:
        sleep_input_text = f"–≤ {sleep_time_str}"
    
    response = f"""
üõè **–í—ã –ª–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å {sleep_input_text}**
üí§ **–° —É—á—ë—Ç–æ–º 15 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞—Å—ã–ø–∞–Ω–∏–µ**

‚è∞ **–õ—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è:**

{chr(10).join(wake_times)}

üò¥ **–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!** –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –≤—Ä–µ–º—ë–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        "ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞!"
    )

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
    start_keep_alive()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Ä–µ–º—è —Å–Ω–∞)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_sleep))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ SleepyBot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
